name: Release

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
        default: patch
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "First release, generating full changelog"
            COMMITS=$(git log --pretty=format:"* %s (%h)" --no-merges)
          else
            echo "Generating changelog from $PREVIOUS_TAG to ${{ steps.get_version.outputs.tag }}"
            COMMITS=$(git log --pretty=format:"* %s (%h)" --no-merges $PREVIOUS_TAG..${{ steps.get_version.outputs.tag }})
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.tag }}
          release_name: Release ${{ steps.get_version.outputs.tag }}
          body: |
            ## Changes in ${{ steps.get_version.outputs.tag }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Docker Images
            
            Pull the images using:
            ```bash
            docker pull ghcr.io/${{ github.repository }}/backend:${{ steps.get_version.outputs.tag }}
            docker pull ghcr.io/${{ github.repository }}/bot:${{ steps.get_version.outputs.tag }}
            docker pull ghcr.io/${{ github.repository }}/worker:${{ steps.get_version.outputs.tag }}
            docker pull ghcr.io/${{ github.repository }}/frontend:${{ steps.get_version.outputs.tag }}
            ```
            
            ## Installation
            
            Refer to the [deployment documentation](.github/BRANCH_PROTECTION.md) for installation instructions.
          draft: false
          prerelease: false

  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Bump version in pyproject.toml
        run: |
          VERSION="${{ github.event.inputs.version }}"
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          echo "Updated version to $VERSION"

      - name: Commit version bump
        run: |
          git add pyproject.toml
          git commit -m "chore(release): bump version to ${{ github.event.inputs.version }}"

      - name: Create and push tag
        run: |
          TAG="v${{ github.event.inputs.version }}"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin main --tags

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: create-release
    if: always()
    steps:
      - name: Release summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ needs.create-release.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Deploy to staging using the [Deploy workflow](.github/workflows/deploy.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- Verify functionality in staging" >> $GITHUB_STEP_SUMMARY
          echo "- Promote to production when ready" >> $GITHUB_STEP_SUMMARY
