name: CI

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  lint-python:
    name: Lint Python Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run Ruff linter
        run: ruff check apps/backend apps/bot src tests --output-format=github

      - name: Check Ruff formatting
        run: ruff format --check apps/backend apps/bot src tests

      - name: Run Black formatter check
        run: black --check apps/backend apps/bot src tests

  typecheck-python:
    name: Type Check Python
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run mypy
        run: mypy apps/backend/src apps/bot/src src

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run backend tests with coverage
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: test
        run: |
          pytest tests apps/backend/tests \
            --cov=backend \
            --cov=user_service \
            --cov-report=term-missing \
            --cov-report=xml:coverage-backend.xml \
            --cov-report=html:htmlcov-backend \
            --cov-fail-under=80 \
            -v

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage-backend.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Upload backend coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-backend
          path: |
            coverage-backend.xml
            htmlcov-backend/
          retention-days: 30

  test-bot:
    name: Test Bot
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run bot tests with coverage
        env:
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: test
        run: |
          pytest apps/bot/tests \
            --cov=bot \
            --cov-report=term-missing \
            --cov-report=xml:coverage-bot.xml \
            --cov-report=html:htmlcov-bot \
            --cov-fail-under=80 \
            -v

      - name: Upload bot coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage-bot.xml
          flags: bot
          name: bot-coverage
          fail_ci_if_error: false

      - name: Upload bot coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-bot
          path: |
            coverage-bot.xml
            htmlcov-bot/
          retention-days: 30

  lint-frontend:
    name: Lint Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend/spa
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint:js

      - name: Run Stylelint
        run: pnpm lint:style

      - name: Check Prettier formatting
        run: pnpm format:check

  typecheck-frontend:
    name: Type Check Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend/spa
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript type check
        run: pnpm typecheck

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend/spa
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run frontend tests with coverage
        run: pnpm test:coverage

      - name: Check coverage threshold
        run: |
          if [ ! -f coverage/coverage-summary.json ]; then
            echo "❌ coverage/coverage-summary.json not found"
            exit 1
          fi

          node <<'EOF'
          const fs = require('fs');
          const summary = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
          if (!summary?.total?.lines) {
            console.error('❌ Unable to read line coverage from coverage-summary.json');
            process.exit(1);
          }
          const { covered, total } = summary.total.lines;
          const percentage = (covered / total) * 100;
          console.log(`Coverage: ${percentage.toFixed(2)}%`);
          if (percentage < 80) {
            console.error(`❌ Coverage ${percentage.toFixed(2)}% is below the required 80% threshold`);
            process.exit(1);
          }
          console.log('✅ Coverage requirement satisfied');
          EOF

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/spa/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

      - name: Upload frontend coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-frontend
          path: frontend/spa/coverage/
          retention-days: 30

  coverage-report:
    name: Combined Coverage Report
    runs-on: ubuntu-latest
    needs: [test-backend, test-bot, test-frontend]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare coverage artifacts directory
        run: mkdir -p coverage-artifacts

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-artifacts

      - name: Display coverage structure
        shell: bash
        run: |
          if compgen -G 'coverage-artifacts/*' > /dev/null; then
            echo "Coverage artifacts found:"
            ls -R coverage-artifacts
          else
            echo "No coverage artifacts were downloaded."
          fi

      - name: Generate coverage summary
        shell: bash
        run: |
          echo "# Coverage Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          if compgen -G 'coverage-artifacts/*' > /dev/null; then
            echo "Coverage artifacts were downloaded and inspected." >> "$GITHUB_STEP_SUMMARY"
          else
            echo "⚠️ No coverage artifacts were downloaded. Upstream jobs may have failed before producing coverage." >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "" >> "$GITHUB_STEP_SUMMARY"

          echo "## Backend Coverage" >> "$GITHUB_STEP_SUMMARY"
          if [ -f coverage-artifacts/coverage-backend/coverage-backend.xml ]; then
            echo "✅ Backend tests passed with coverage" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "❌ Backend coverage not found" >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "" >> "$GITHUB_STEP_SUMMARY"

          echo "## Bot Coverage" >> "$GITHUB_STEP_SUMMARY"
          if [ -f coverage-artifacts/coverage-bot/coverage-bot.xml ]; then
            echo "✅ Bot tests passed with coverage" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "❌ Bot coverage not found" >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "" >> "$GITHUB_STEP_SUMMARY"

          echo "## Frontend Coverage" >> "$GITHUB_STEP_SUMMARY"
          if [ -d coverage-artifacts/coverage-frontend ]; then
            echo "✅ Frontend tests passed with coverage" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "❌ Frontend coverage not found" >> "$GITHUB_STEP_SUMMARY"
          fi
